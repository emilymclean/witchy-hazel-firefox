extends "package://github.com/BenMMcLean/pkl-github-actions/releases/download/v1.0.0/pkl-github-actions@1.0.0#/actions.pkl"
import "package://components.emilym.cl/actions/actions@0.1.6#/common/common.pkl" as common

local const JOB_VERSION = "version"
local const JOB_RELEASE = "release"
local const JOB_BUILD_FIREFOX = "build-firefox"
local const JOB_BUILD_CHROME = "build-chrome"
local const JOB_RELEASE_FIREFOX = "publish-firefox-release"
local const JOB_RELEASE_CHROME = "publish-chrome-release"

local const ARTIFACT_FIREFOX_XPI = "firefox-xpi"
local const ARTIFACT_CHROME_CRX = "chrome-crx"
local const ARTIFACT_CHROME_ZIP = "chrome-zip"

local const FILE_FIREFOX_XPI = "theme.xpi"
local const FILE_FIREFOX_ZIP = "theme.zip"
local const FILE_CHROME_CRX = "theme.crx"
local const FILE_CHROME_ZIP = "theme.zip"

local updateManifestVersion = new ActionStep {
    name = "Bump manifest version"
    uses = "jacobtomlinson/gha-find-replace@v3"
    with = new Mapping {
        ["find"] = "\"version\": \".+\""
        ["replace"] = "\"version\": \"${{ needs.version.outputs.version }}\""
        ["regex"] = true
    }
}

local firefoxUploadExtensions = List("zip", "xpi")


name = "Build Theme"

on = new On {
    push = new Push {
        branches = new Listing { 
            "main"
            "develop"
        }
    }
}

jobs = new Mapping {
    [JOB_VERSION] = new Job {
        outputs = new Mapping {
            ["version"] = "${{ steps.gitversion.outputs.semVer }}"
        }
        steps = new Listing {
            common.checkout
            new ActionStep {
                name = "Install gitversion"
                uses = "gittools/actions/gitversion/setup@v3.0.0"
                with = new Mapping {
                    ["versionSpec"] = "5.x"
                }
            }
            new ActionStep {
                id = "gitversion"
                name = "Use gitversion"
                uses = "gittools/actions/gitversion/execute@v3.0.0"
                with = new Mapping {
                    ["useConfigFile"] = true
                    ["configFilePath"] = "./gitversion.yml"
                }
            }
            new CommandStep {
                name = "Display version"
                run = "echo \"SemVer: ${{ steps.gitversion.outputs.semVer }}\""
            }
        }
    }
    [JOB_BUILD_FIREFOX] = new Job {
        needs = new Listing {
            JOB_VERSION
        }
        steps = new Listing {
            common.checkout
            updateManifestVersion
            new CommandStep {
                run = "zip \(FILE_FIREFOX_XPI) manifest.json"
            }
            new ActionStep {
                uses = "actions/upload-artifact@v4"
                with = new Mapping {
                    ["name"] = ARTIFACT_FIREFOX_XPI
                    ["path"] = "./\(FILE_FIREFOX_XPI)"
                }
            }
        }
    }
    [JOB_BUILD_CHROME] = new Job {
        needs = new Listing {
            JOB_VERSION
        }
        steps = new Listing {
            common.checkout
            updateManifestVersion
            new ActionStep {
                uses = "actions/setup-python@v5"
                with = new Mapping {
                    ["python-version"] = "3.10"
                }
            }
            new CommandStep {
                run = "python rewrite-manifest.py"
            }
            new CommandStep {
                run = "zip \(FILE_CHROME_ZIP) chrome/"
            }
            new ActionStep {
                uses = "BenMMcLean/pack-chromium-extension-action@v1.0.3"
                env = new Mapping {
                    ["EXTENSION_KEY"] = "${{ secrets.CHROME_SIGNING_KEY }}"
                }
                with = new Mapping {
                    ["input-folder"] = "chrome"
                    ["output-file"] = FILE_CHROME_CRX
                }
            }
            new ActionStep {
                uses = "actions/upload-artifact@v4"
                with = new Mapping {
                    ["name"] = ARTIFACT_CHROME_ZIP
                    ["path"] = "./\(FILE_CHROME_ZIP)"
                }
            }
            new ActionStep {
                uses = "actions/upload-artifact@v4"
                with = new Mapping {
                    ["name"] = ARTIFACT_CHROME_CRX
                    ["path"] = "./\(FILE_CHROME_CRX)"
                }
            }
        }
    }
    [JOB_RELEASE] = new Job {
        needs = new Listing {
            JOB_VERSION
        }
        `if` = "github.event_name != 'pull_request'"
        permissions = new Mapping {
            ["contents"] = "write"
        }
        outputs = new Mapping {
            ["upload_url"] = "${{ steps.create_release.outputs.upload_url }}"
        }
        steps = new Listing {
            common.checkout
            ...common.create_release
        }
    }
    [JOB_RELEASE_FIREFOX] = new Job {
        permissions = new Mapping {
            ["contents"] = "write"
        }
        needs = new Listing {
            JOB_VERSION
            JOB_RELEASE
            JOB_BUILD_FIREFOX
        }
        steps = new Listing {
            new ActionStep {
                uses = "actions/download-artifact@v4"
                with = new Mapping {
                    ["name"] = ARTIFACT_FIREFOX_XPI
                    ["path"] = "./"
                }
            }
            for (extension in firefoxUploadExtensions) {
                new ActionStep {
                    name = "Upload Artifact to Release"
                    uses = "shogo82148/actions-upload-release-asset@v1"
                    env = new Mapping {
                        ["GITHUB_TOKEN"] = "${{ secrets.GITHUB_TOKEN }}"
                    }
                    with = new Mapping {
                        ["upload_url"] = "${{ needs.release.outputs.upload_url }}"
                        ["asset_path"] = "./\(FILE_FIREFOX_XPI)"
                        ["asset_name"] = "firefox-witchy-hazel-v${{ needs.version.outputs.version }}.unsigned.\(extension)"
                        ["asset_content_type"] = "application/zip"
                    }
                }
            }
        }  
    }
    [JOB_RELEASE_CHROME] = new Job {
        strategy = new JobStrategy {
            matrix = new Mapping {
                ["name"] = new Listing {
                    ARTIFACT_CHROME_CRX
                    ARTIFACT_CHROME_ZIP
                }
                ["include"] = new Listing {
                    new Mapping {
                        ["name"] = ARTIFACT_CHROME_CRX
                        ["file-name"] = FILE_CHROME_CRX
                        ["extension"] = "crx"
                        ["content-type"] = "application/x-chrome-extension"
                    }
                    new Mapping {
                        ["name"] = ARTIFACT_CHROME_ZIP
                        ["file-name"] = FILE_CHROME_ZIP
                        ["extension"] = "zip"
                        ["content-type"] = "application/zip"
                    }
                }
            }
        }
        permissions = new Mapping {
            ["contents"] = "write"
        }
        needs = new Listing {
            JOB_VERSION
            JOB_RELEASE
            JOB_BUILD_CHROME
        }
        steps = new Listing {
            new ActionStep {
                uses = "actions/download-artifact@v4"
                with = new Mapping {
                    ["name"] = "${{ matrix.name }}"
                    ["path"] = "./"
                }
            }
            new ActionStep {
                name = "Upload Artifact to Release"
                uses = "shogo82148/actions-upload-release-asset@v1"
                env = new Mapping {
                    ["GITHUB_TOKEN"] = "${{ secrets.GITHUB_TOKEN }}"
                }
                with = new Mapping {
                    ["upload_url"] = "${{ needs.release.outputs.upload_url }}"
                    ["asset_path"] = "./${{ matrix.file-name }}"
                    ["asset_name"] = "chrome-witchy-hazel-v${{ needs.version.outputs.version }}.unsigned.${{ matrix.extension }}"
                    ["asset_content_type"] = "application/zip"
                }
            }
        }  
    }
}